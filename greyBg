#!/usr/bin/env python

'''
Tool to provide a gray background for various rendered images (e.g. tanim obrs,
look comps, etc.)

Inputs are the source images, the destination, and the frange to run. We use
'oiiotool' to actually do the composite operation
'''

import os
import subprocess
import argparse
import danibb

if __name__ == '__main__':

    description = '''
    Tool to apply a 50 % gray background to source images and save the result 
    in destination. Source is an image sequence in someDir/someName.#.exr format
    '''

    epilog = '''

    Examples:

    greyBg tanim.%04d.exr
    greyBg tanim.0129.exr
    greyBg tanim.#.exr --frameRange 1-10
    greyBg tanim.#.exr -f 1-10 --dest tanimOnGrey.#.exr
    '''

    parser = argparse.ArgumentParser(description=description, epilog=epilog, \
      formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('srcPath', default=None,
                            help='the path to the source images')
    parser.add_argument('-d', '--dest', dest='dstPath', default=None,
                            help='the path to the destination images')
    parser.add_argument('-f',  '--frameRange', dest='frange', default=None, \
      help='Frame Range')
    args = parser.parse_args()


    if args.dstPath:
        dstPath = args.dstPath
    else:
        dstPath = args.srcPath
    if args.frange:
        frange = '--frames %s' % args.frange
    else:
        frange = ''

    # figure out the resolution and num channels of the input files. Use the 
    # info option of oiiotool. the result has the following format: 
    # tanim.0001.exr : 1920 x  804, 5 channel, half/half/half/half/float openexr
    # we need the 2nd, 4th, and 5th token
    cmd = 'oiiotool --info %s %s' % (frange, args.srcPath)
    try:
        result = subprocess.Popen(cmd, shell=True, stdin=subprocess.PIPE, \
          stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True)
    except subprocess.CalledProcessError as e:
        print 'Failed: %s' % e
        sys.exit(1)
    except OSError:
        print 'oiiotool Not found, quitting'
        sys.exit(1)

    # only care about the first line
    results = result.stdout.readline().split()
    res = '%sx%s' % (results[2], results[4])
    numChans = results[5]

    # convert the files now
    cmd = 'oiiotool %s %s --pattern' \
      ' constant:color=0.2176,0.2176,0.2176,1 %s %s --over -o %s' % \
      (frange, args.srcPath, res, numChans, dstPath)

    try:
        subprocess.check_call(cmd, shell=True)
    except subprocess.CalledProcessError as e:
        print 'Failed: %s' % e
        pass
    except OSError:
        print 'oiiotool Not found, quitting'
        pass
